README - This file gives a short overview onto the openICM framework.

1) LICENSE
2) STRUCTURE
2) DEVELOPING
3) CODING RULES

##############################
# 1 - LICENSE                #
##############################
Copyright 2010 Joachim Wietzke and Manh Tien Tran

Contact and informations:
University of Applied Sciences Darmstadt, Germany
http://www.fbi.h-da.de/~j.wietzke
or
http://www.fbi.h-da.de/~openicm


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

##############################
# 2 - STRUCTURE              #
##############################

This project can be divided into two major parts:
 a) base (software framework, abstraction of system API)
 b) app  (application code, relying onto the software framework)

These two parts are reflected by the directory structure, which
can be found within the src folder.

##############################
# 3- DEVELOPING              #
##############################

For reasons of simplification, the whole project is build by use of
a single Makefile, which can be found within the project's root folder.
 
To incorporate your code into the build-process there 
are only two things you need to do:
 1. 	If you add new classes (*.h AND *.cpp files) you need 
 	to add one entry in the Object File Section below. 
 
 2. 	If you also add subdirectories you need to add a 
 	target definition in the Source Code Compile Section
 	which can be found at the end of this file. 
 
 If you get into trouble editing this file or get into problems 
 when adding your code to the build process we will help you. 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! We would very much appreciate to receive short notice, if anyone make
!! use and/or enhance the openICM.
!! 
!! Thanks!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

##############################
# 4 - CODING RULES           #
##############################

 HEADER FILES:
 - name header file as name as class name
 - header file definition begins with 
 		#ifndef _HEADERFILE_H
 		#define _HEADERFILE_H
 		// your definition(s)
 		...
 		#endif //end of _HEADERFILE_H
 - include header file(s) with 
 		#ifndef _HEADERFILE_TO_INCLUDE_H
 			#include "HeaderfileToInclude.h"
 		#endif
 
 CLASS NAMES:
 - interface definition is named with 'I...', e.g. IMyInterface
 - abstract class definition is named with 'A...', e.g. AMyAbstractClass
 - class definition is named with 'C...', e.g. CMyClass
 
 MEMBER VAR NAMES of a class:
 - concret object/var is named with 'm...', e.g. int mMyVar
 - pointer object/var is named with 'p...', e.g. int* pMyPtr
 - static object/var is named with 's...', e.g. static int sMyVar


### EOF ###
 
